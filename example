var g : int;
var k: int;
var fun : [int] int;
procedure F(n: int) returns (r: int) modifies g;
  requires g == -1 || g == 6;
  ensures g == -1 || g == 6;
  ensures k <= 1 ==> fun[k] == 1 && k >1 ==> fun[k] == fun[k-1]*k && r == fun[n];
{
  if (n <= 1) {
    r := 1;
  } if ( n == 3 && g == -1) {
    call r := F(n -1);
    g := n * r;
    r := g;
  } else if ( n ==3 && g != -1) {
    r:= g;
  } else {
    call r := F(n-1);
    r := n * r;
  }
}
